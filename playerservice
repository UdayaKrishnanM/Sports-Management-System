<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
    <title>Login Page</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <style>
body {
    background: #222D32;
    font-family: 'Roboto', sans-serif;
}

.login-box {
    margin-top: 75px;
    height: auto;
    background: #1A2226;
    text-align: center;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
}

.login-key {
    height: 100px;
    font-size: 80px;
    line-height: 100px;
    background: -webkit-linear-gradient(#27EF9F, #0DB8DE);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.login-title {
    margin-top: 15px;
    text-align: center;
    font-size: 30px;
    letter-spacing: 2px;
    margin-top: 15px;
    font-weight: bold;
    color: #ECF0F5;
}

.login-form {
    margin-top: 25px;
    text-align: left;
}

input[type=text] {
    background-color: #1A2226;
    border: none;
    border-bottom: 2px solid #0DB8DE;
    border-top: 0px;
    border-radius: 0px;
    font-weight: bold;
    outline: 0;
    margin-bottom: 20px;
    padding-left: 0px;
    color: #ECF0F5;
}

input[type=password] {
    background-color: #1A2226;
    border: none;
    border-bottom: 2px solid #0DB8DE;
    border-top: 0px;
    border-radius: 0px;
    font-weight: bold;
    outline: 0;
    padding-left: 0px;
    margin-bottom: 20px;
    color: #ECF0F5;
}

.form-group {
    margin-bottom: 40px;
    outline: 0px;
}

.form-control:focus {
    border-color: inherit;
    -webkit-box-shadow: none;
    box-shadow: none;
    border-bottom: 2px solid #0DB8DE;
    outline: 0;
    background-color: #1A2226;
    color: #ECF0F5;
}

input:focus {
    outline: none;
    box-shadow: 0 0 0;
}

label {
    margin-bottom: 0px;
}

.form-control-label {
    font-size: 10px;
    color: #6C6C6C;
    font-weight: bold;
    letter-spacing: 1px;
}

.btn-outline-primary {
    border-color: #0DB8DE;
    color: #0DB8DE;
    border-radius: 0px;
    font-weight: bold;
    letter-spacing: 1px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
}

.btn-outline-primary:hover {
    background-color: #0DB8DE;
    right: 0px;
}

.login-btm {
    float: left;
}

.login-button {
    padding-right: 0px;
    text-align: right;
    margin-bottom: 25px;
}

.login-text {
    text-align: left;
    padding-left: 0px;
    color: #A2A4A4;
}

.loginbttm {
    padding: 0px;
}
    </style>
</head>
<body>

    <div class="container">
        <div class="row">
            <div class="col-lg-3 col-md-2">
            </div>
            <div class="col-lg-6 col-md-8 login-box">
                <div class="col-lg-12 login-key">
                    <i class="fa fa-key" aria-hidden="true"></i>
                </div>
                <div class="col-lg-12 login-title">
                    ADMIN LOGIN
                </div>

                <div class="col-lg-12 login-form">
                    <div class="col-lg-12 login-form">
                        <form action="/" method="post">
                            <div class="form-group">
                                <label class="form-control-label">Enter the ID:</label>
                                <input type="text" class="form-control" id="id" name="id" required>
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Password</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>

                            <div class="col-lg-12 loginbttm">
                                <div class="col-lg-6 login-btm login-text">
                                </div>
                                <div class="col-lg-6 login-btm login-button">
                                    <button type="submit" class="btn btn-outline-primary">LOGIN</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="col-lg-3 col-md-2"></div>
            </div>
        </div>
        </div>


	<script>
    $(document).ready(function() {
        var message = "${message}";
		if(message.trim() !==""){
        	alert(message);
        }
    });
	</script>


</body>
</html>












package com.sportsmanagement.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.sportsmanagement.model.Player;
import com.sportsmanagement.service.PlayerService;

import java.util.List;

@RestController
@RequestMapping("/players")
public class PlayerController {

    @Autowired
    private PlayerService playerService;

    //working
    @PostMapping("/add")
    public ResponseEntity<Player> addPlayer(@RequestBody Player player) {
        Player newPlayer = playerService.addPlayer(player);
        return new ResponseEntity<>(newPlayer, HttpStatus.CREATED);
    }

    
    //working
    @PostMapping("/addAll")
    public ResponseEntity<List<Player>> addPlayers(@RequestBody List<Player> players) {
        List<Player> newPlayers = playerService.addPlayers(players);
        return new ResponseEntity<>(newPlayers, HttpStatus.CREATED);
    }

    
    //working
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<?> deletePlayer(@PathVariable("id") int id) {
        playerService.deletePlayer(id);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    //working
    @GetMapping("/getAll")
    public ResponseEntity<List<Player>> getAllPlayers() {
        List<Player> players = playerService.getAllPlayers();
        return new ResponseEntity<>(players, HttpStatus.OK);
    }

    //working
    @GetMapping("/getById/{id}")
    public ResponseEntity<Player> getPlayerById(@PathVariable("id") int id) {
        Player player = playerService.getPlayerById(id);
        return new ResponseEntity<>(player, player != null ? HttpStatus.OK : HttpStatus.NOT_FOUND);
    }

//    @GetMapping("/getTopODIPlayers")
//    public ResponseEntity<List<Player>> getTopPlayersFromODIRank() {
//        List<Player> topPlayers = playerService.getTopPlayers();
//        return new ResponseEntity<>(topPlayers, HttpStatus.OK);
//    }

    
    //working
    @PutMapping("/updateDepartment/{id}")
    public ResponseEntity<Player> updatePlayerDepartment(@PathVariable("id") int id, @RequestBody String department) {
        Player updatedPlayer = playerService.updatePlayerDepartment(id, department);
        return new ResponseEntity<>(updatedPlayer, updatedPlayer != null ? HttpStatus.OK : HttpStatus.NOT_FOUND);
    }

    
    // working
    @PutMapping("/updateAge/{id}")
    public ResponseEntity<Player> updatePlayerAge(@PathVariable("id") int id, @RequestBody int age) {
        Player updatedPlayer = playerService.updatePlayerAge(id, age);
        return new ResponseEntity<>(updatedPlayer, updatedPlayer != null ? HttpStatus.OK : HttpStatus.NOT_FOUND);
    }
    
    //old and not working
//    @PutMapping("/updateAge/{id}")
//    public ResponseEntity<Player> updatePlayerAge(@PathVariable("id") int id, @RequestParam("age") int age) {
//        Player updatedPlayer = playerService.updatePlayerAge(id, age);
//        return new ResponseEntity<>(updatedPlayer, updatedPlayer != null ? HttpStatus.OK : HttpStatus.NOT_FOUND);
//    }
    
}






//	@Autowired
//    private final PlayerService playerService;
//
//    public PlayerController(PlayerService playerService) {
//        this.playerService = playerService;
//    }
//
//    @GetMapping("/list")
//    public String listPlayers(Model model) {
//        List<Player> players = playerService.getAllPlayers();
//        model.addAttribute("players", players);
//        return "player/list";
//    }
//
//    @GetMapping("/add")
//    public String showAddPlayerForm(Model model) {
//        model.addAttribute("player", new Player());
//        return "player/form";
//    }
//
//    @PostMapping("/add")
//    public String addPlayer(@Valid @ModelAttribute("player") Player player, BindingResult result) {
//        if (result.hasErrors()) {
//            return "player/form";
//        }
//        playerService.addPlayer(player);
//        return "redirect:/players/list";
//    }
//
//    @GetMapping("/update/{id}")
//    public String showUpdatePlayerForm(@PathVariable("id") int id, Model model) {
//        Player player = playerService.getPlayerById(id);
//        model.addAttribute("player", player);
//        return "player/form";
//    }
//
//    @PostMapping("/update/{id}")
//    public String updatePlayer(@PathVariable("id") int id, @Valid @ModelAttribute("player") Player player, BindingResult result) {
//        if (result.hasErrors()) {
//            return "player/form";
//        }
//        playerService.updatePlayer(player);
//        return "redirect:/players/list";
//    }
//
//    @GetMapping("/delete/{id}")
//    public String deletePlayer(@PathVariable("id") int id) {
//        playerService.deletePlayer(id);
//        return "redirect:/players/list";
//    }


>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<

package com.sportsmanagement.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.sportsmanagement.model.Player;
import com.sportsmanagement.service.PlayerService;

import java.util.List;

@Controller
public class PlayerController {

    @Autowired
    private PlayerService playerService;

    public PlayerController(PlayerService playerService) {
    	super();
    	this.playerService = playerService;
    }
    
    
    //working
    @RequestMapping(value = "/players/add", method= RequestMethod.POST)
    public ResponseEntity<Player> addPlayer(@RequestBody Player player) {
        Player newPlayer = playerService.addPlayer(player);
        return new ResponseEntity<>(newPlayer, HttpStatus.CREATED);
    }

    
    //working
    @RequestMapping(value = "/players/addAll", method= RequestMethod.POST)
    public ResponseEntity<List<Player>> addPlayers(@RequestBody List<Player> players) {
        List<Player> newPlayers = playerService.addPlayers(players);
        return new ResponseEntity<>(newPlayers, HttpStatus.CREATED);
    }

    
    //working
    @RequestMapping(value = "/players/delete/{id}", method= RequestMethod.DELETE)
    public ResponseEntity<?> deletePlayer(@PathVariable("id") int id) {
        playerService.deletePlayer(id);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    //working
    @RequestMapping(value = "/players/getAll", method= RequestMethod.GET)
    public ResponseEntity<List<Player>> getAllPlayers() {
        List<Player> players = playerService.getAllPlayers();
        return new ResponseEntity<>(players, HttpStatus.OK);
    }

    //working
    @RequestMapping(value = "/players/getById/{id}", method= RequestMethod.GET)
    @GetMapping("/getById/{id}")
    public ResponseEntity<Player> getPlayerById(@PathVariable("id") int id) {
        Player player = playerService.getPlayerById(id);
        return new ResponseEntity<>(player, player != null ? HttpStatus.OK : HttpStatus.NOT_FOUND);
    }

//    @GetMapping("/getTopODIPlayers")
//    public ResponseEntity<List<Player>> getTopPlayersFromODIRank() {
//        List<Player> topPlayers = playerService.getTopPlayers();
//        return new ResponseEntity<>(topPlayers, HttpStatus.OK);
//    }

    
    //working
    @RequestMapping(value = "/players/updateDepartment/{id}", method= RequestMethod.PUT)
    public ResponseEntity<Player> updatePlayerDepartment(@PathVariable("id") int id, @RequestBody String department) {
        Player updatedPlayer = playerService.updatePlayerDepartment(id, department);
        return new ResponseEntity<>(updatedPlayer, updatedPlayer != null ? HttpStatus.OK : HttpStatus.NOT_FOUND);
    }

    
    // working
    @RequestMapping(value = "/players/updateAge/{id}", method= RequestMethod.PUT)
    public ResponseEntity<Player> updatePlayerAge(@PathVariable("id") int id, @RequestBody int age) {
        Player updatedPlayer = playerService.updatePlayerAge(id, age);
        return new ResponseEntity<>(updatedPlayer, updatedPlayer != null ? HttpStatus.OK : HttpStatus.NOT_FOUND);
    }
    
    //old and not working
//    @PutMapping("/updateAge/{id}")
//    public ResponseEntity<Player> updatePlayerAge(@PathVariable("id") int id, @RequestParam("age") int age) {
//        Player updatedPlayer = playerService.updatePlayerAge(id, age);
//        return new ResponseEntity<>(updatedPlayer, updatedPlayer != null ? HttpStatus.OK : HttpStatus.NOT_FOUND);
//    }
    
}






//	@Autowired
//    private final PlayerService playerService;
//
//    public PlayerController(PlayerService playerService) {
//        this.playerService = playerService;
//    }
//
//    @GetMapping("/list")
//    public String listPlayers(Model model) {
//        List<Player> players = playerService.getAllPlayers();
//        model.addAttribute("players", players);
//        return "player/list";
//    }
//
//    @GetMapping("/add")
//    public String showAddPlayerForm(Model model) {
//        model.addAttribute("player", new Player());
//        return "player/form";
//    }
//
//    @PostMapping("/add")
//    public String addPlayer(@Valid @ModelAttribute("player") Player player, BindingResult result) {
//        if (result.hasErrors()) {
//            return "player/form";
//        }
//        playerService.addPlayer(player);
//        return "redirect:/players/list";
//    }
//
//    @GetMapping("/update/{id}")
//    public String showUpdatePlayerForm(@PathVariable("id") int id, Model model) {
//        Player player = playerService.getPlayerById(id);
//        model.addAttribute("player", player);
//        return "player/form";
//    }
//
//    @PostMapping("/update/{id}")
//    public String updatePlayer(@PathVariable("id") int id, @Valid @ModelAttribute("player") Player player, BindingResult result) {
//        if (result.hasErrors()) {
//            return "player/form";
//        }
//        playerService.updatePlayer(player);
//        return "redirect:/players/list";
//    }
//
//    @GetMapping("/delete/{id}")
//    public String deletePlayer(@PathVariable("id") int id) {
//        playerService.deletePlayer(id);
//        return "redirect:/players/list";
//    }

